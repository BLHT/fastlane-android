# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do |lane, options|
  ENV["GIT_BRANCH"] = git_branch
  ENV['VERSIONNAME'] ||= get_version_name
  ENV['VERSIONCODE'] ||= get_version_code
  ENV['CHANGELOG'] = read_changelog(
    changelog_path: './CHANGELOG.md',
    section_identifier: '[Unreleased]',
    excluded_markdown_elements: ['-', '###']
  )
  slack(
    message: "Hi! @channel \r\n A new build start",
    default_payloads: [:git_branch, :lane, :git_author]
  )
  send_e_mail(
    subject: "#{ENV['SEND_E_MAIL_SUBJECT']} - #{ENV['GIT_BRANCH']} - CI for #{ENV["FASTLANE_PLATFORM_NAME"]}",
    message_body: "Hi! @issenn, A new build start"
  )
  gradle(
    task: "-v"
  )
  gradle(
    task: "clean"
  )
end

before_each do |lane, options|
  # ...
end

lane :test do |options|
  puts 'testing'
  puts lane_context[SharedValues::PLATFORM_NAME]
  puts ENV["FASTLANE_PLATFORM_NAME"]
end

desc "Submit a new Release Build to all"
lane :do_publish_all do |options|
  do_publish_china
  do_upload_firim
  do_publish_google
  do_upload_firim
end

desc "Submit a new Release Build to China"
lane :do_publish_china do |options|
  gradle(
    task: "assemble",
    flavor: "China",
    build_type: "Release",
    print_command_output: true
  )
  # do_upload_firim
end

desc "Submit a new Release Build to Google"
lane :do_publish_google do |options|
  gradle(
    task: "assemble",
    flavor: "Google",
    build_type: "Release",
    print_command_output: true
  )
  # do_upload_firim
end

$upload_retry=0

lane :do_upload_firim do
  puts lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  puts lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
  puts lane_context[SharedValues::GRADLE_FLAVOR]
  puts lane_context[SharedValues::GRADLE_BUILD_TYPE]
  puts get_version_name
  puts get_version_code
  begin
    flavor = lane_context[SharedValues::GRADLE_FLAVOR] || /([^\/-]*)(?=-[^\/-]*\.apk$)/.match(apk)
    slack(
      message: "Hi! @issenn \r\n A new app uploading \r\nFlavor: #{flavor}",
      default_payloads: [:git_branch, :lane, :git_author]
    )
    change_log = "[#{flavor}]+[#{ENV['GIT_BRANCH']}]\r\n---\r\n" + ENV['CHANGELOG']
    firim(
      apk: lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
      app_version: get_version_name,
      app_build_version: get_version_code,
      app_changelog: change_log
    )
    slack(
      message: "Hi! @issenn \r\n A new app upload success \r\nFlavor: #{flavor} \r\n#{ENV['CHANGELOG']}",
      success: true,
      default_payloads: [:git_branch, :lane, :git_author, :test_result]
    )
    send_e_mail(
      subject: "#{ENV['SEND_E_MAIL_SUBJECT']} - #{ENV['GIT_BRANCH']} - CI for #{ENV["FASTLANE_PLATFORM_NAME"]}",
      message_body: "Hi! @issenn \r\n A new app upload success \r\nFlavor: #{flavor} \r\n#{ENV['CHANGELOG']}"
    )
    $upload_retry=0
  rescue => ex
    $upload_retry += 1
    if $upload_retry < 3
      do_upload_firim
    else
      slack(
        message: "Hi! @issenn \r\n A new app upload failed \r\nFlavor: #{flavor}",
        success: false,
        default_payloads: [:git_branch, :lane, :git_author, :test_result]
      )
      send_e_mail(
        subject: "#{ENV['SEND_E_MAIL_SUBJECT']} - #{ENV['GIT_BRANCH']} - CI for #{ENV["FASTLANE_PLATFORM_NAME"]}",
        message_body: "Hi! @issenn \r\n A new app upload failed \r\nFlavor: #{flavor} \r\n#{ENV['CHANGELOG']}"
      )
      # raise ex
      puts ex
    end
  end
end

after_each do |lane, options|
  # ...
end

after_all do |lane, options|
  slack(
    message: "Hi! @channel \r\n A new build end",
    default_payloads: [:git_branch, :lane, :git_author]
  )
end

error do |lane, exception, options|
  if options[:debug]
    puts "Hi :)"
  end
  UI.message(exception.message)
end
